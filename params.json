{"name":"Mingo","tagline":"JavaScript query library using mongo-esque syntax","body":"# Mingo\r\nA JavaScript implementation of mongo-esque query language\r\n\r\n## Dependencies\r\n[underscore](https://github.com/jashkenas/underscore)\r\n\r\n## Installing\r\n$ npm install mingo\r\n\r\n## Features\r\n- Comparisons Operators ($gt, $gte, $lt, $lte, $ne, $nin, $in)\r\n- Logical Operators ($and, $or, $nor, $not)\r\n- Evaluation Operators ($regex, $mod, $where)\r\n- Array Operators ($all, $elemMatch, $size)\r\n- Element Operators ($exists, $type)\r\n- Aggregation Pipeline Operators ($group, $match, $project, $sort, $limit, $unwind, $skip)\r\n- Conditional Operators ($cond, $ifNull)\r\n- Group Operators ($addToSet, $sum, $max, $min, $avg, $push, $first, $last)\r\n- Arithmetic Operators ($add, $divide, $mod, $multiply, $subtract)\r\n- String Operators ($cmp, $strcasecmp, $concat, $substr, $toLower, $toUpper)\r\n- Projection Operators ($elemMatch, $slice)\r\n\r\n## Usage\r\n~~~javascript\r\n\r\nvar Mingo = require('mingo');\r\n\r\n// setup the key field for your collection\r\nMingo.setup({\r\n    key: '_id' // default\r\n});\r\n\r\n// create a query with criteria\r\n// find all grades for homework with score >= 50\r\nvar query = new Mingo.Query({\r\n    type: \"homework\",\r\n    score: { $gte: 50 }\r\n});\r\n~~~\r\n\r\n### Searching and Filtering\r\n~~~javascript\r\n// filter collection with find()\r\nvar cursor = query.find(collection);\r\n\r\n// sort, skip and limit by chaining\r\ncursor.sort({student_id: 1, score: -1})\r\n    .skip(100)\r\n    .limit(100);\r\n\r\n// count matches\r\ncursor.count();\r\n\r\n// iterate cursor\r\n// iteration is forward only\r\nwhile (cursor.hasNext()) {\r\n    console.log(cursor.next());\r\n}\r\n\r\n// use first(), last() and all() to retrieve matched objects\r\ncursor.first();\r\ncursor.last();\r\ncursor.all();\r\n\r\n// Removing matched objects\r\nvar result = query.remove(collection);\r\n~~~\r\n\r\n### Aggregation Pipeline\r\n~~~javascript\r\nvar agg = new Mingo.Aggregator([\r\n    {'$match': { \"type\": \"homework\"}},\r\n    {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\r\n    {'$sort':{'_id': 1, 'score': 1}}\r\n]);\r\n\r\nvar result = agg.run(collection);\r\n\r\n// shorthand\r\nresult = Mingo.aggregate(\r\n    collection,\r\n    [\r\n        {'$match': { \"type\": \"homework\"}},\r\n        {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\r\n        {'$sort':{'_id': 1, 'score': 1}}\r\n    ]\r\n);\r\n~~~\r\n\r\n## Backbone Integration\r\n~~~javascript\r\n// using with Backbone\r\nvar Grades = Backbone.Collection.extend(Mingo.CollectionMixin);\r\n\r\nvar grades = new Grades(collection);\r\n\r\n// find students with grades less than 50 in homework or quiz\r\n// sort by score ascending and type descending\r\ncursor = grades.query({\r\n    $or: [{type: \"quiz\", score: {$lt: 50}}, {type: \"homework\", score: {$lt: 50}}]\r\n}).sort({score: 1, type: -1}).limit(10);\r\n\r\n// print grade with the lowest score\r\ncursor.first();\r\n~~~\r\n\r\nFor documentation on using query operators see [mongodb](http://docs.mongodb.org/manual/reference/operator/query/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}